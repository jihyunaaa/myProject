<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MemberDAO">

	<resultMap id="memberMap" type="member">
		<id property="memberNumber" column="MEMBER_NUMBER" />
		<result property="memberId" column="MEMBER_ID" />
		<result property="memberPassword" column="MEMBER_PASSWORD" />
		<result property="memberName" column="MEMBER_NAME" />
		<result property="memberBirth" column="MEMBER_BIRTH" />
		<result property="memberPhoneNumber" column="MEMBER_PHONE_NUMBER" />
		<result property="memberAddressMain" column="MEMBER_ADDRESS_MAIN" />
		<result property="memberAddressDetail" column="MEMBER_ADDRESS_DETAIL" />
		<result property="memberEmailId" column="MEMBER_EMAIL_ID" />
		<result property="memberEmailDomain" column="MEMBER_EMAIL_DOMAIN" />
		<result property="memberRegisterDate" column="MEMBER_REGISTER_DATE" />
		<result property="memberIsAdmin" column="MEMBER_IS_ADMIN" />
		<result property="memberIsWithdraw" column="MEMBER_IS_WITHDRAW" />
		<result property="totalCountNumber" column="TOTAL_COUNT_NUMBER" />
	</resultMap>

	<!-- getAll -->

	<!-- 전체 회원 목록 조회-->
	<select id="SELECTALL" resultMap="memberMap">
		SELECT MEMBER_NUMBER, MEMBER_ID, MEMBER_NAME, MEMBER_BIRTH,
		MEMBER_PHONE_NUMBER, MEMBER_ADDRESS_MAIN, MEMBER_ADDRESS_DETAIL,
		MEMBER_EMAIL_ID, MEMBER_EMAIL_DOMAIN, MEMBER_REGISTER_DATE,
		MEMBER_IS_ADMIN, MEMBER_IS_WITHDRAW, TOTAL_COUNT_NUMBER FROM (SELECT
		MEMBER_NUMBER,
		MEMBER_ID, MEMBER_NAME, MEMBER_BIRTH, MEMBER_PHONE_NUMBER,
		MEMBER_ADDRESS_MAIN, MEMBER_ADDRESS_DETAIL, MEMBER_EMAIL_ID,
		MEMBER_EMAIL_DOMAIN,
		MEMBER_REGISTER_DATE, MEMBER_IS_ADMIN, MEMBER_IS_WITHDRAW, (SELECT
		COUNT(MEMBER_NUMBER) FROM MEMBER) AS TOTAL_COUNT_NUMBER,
		ROW_NUMBER() OVER (ORDER BY MEMBER_NUMBER DESC) RN FROM MEMBER) WHERE RN
		BETWEEN #{memberIndex} AND #{memberContentCount}
	</select>

	<!-- getOne -->

	<!-- 로그인 -->
	<select id="SELECTONELOGIN" resultMap="memberMap">
		SELECT MEMBER_NUMBER, MEMBER_ID, MEMBER_PASSWORD, MEMBER_IS_ADMIN FROM
		MEMBER WHERE MEMBER_ID = #{memberId}
	</select>

	<!-- ID로 회원조회 (관리자 기능)-->
	<select id="SELECTONEMEMBER" resultMap="memberMap">
		SELECT MEMBER_NUMBER, MEMBER_ID, MEMBER_NAME, MEMBER_BIRTH,
		MEMBER_PHONE_NUMBER, MEMBER_ADDRESS_MAIN,
		MEMBER_ADDRESS_DETAIL, MEMBER_EMAIL_ID, MEMBER_EMAIL_DOMAIN,
		MEMBER_REGISTER_DATE, MEMBER_IS_ADMIN, MEMBER_IS_WITHDRAW
		FROM MEMBER WHERE MEMBER_ID = #{memberId}
	</select>

	<!-- 내 정보 상세 보기-->
	<select id="SELECTONEMYINFORMATION" resultMap="memberMap">
		SELECT MEMBER_NUMBER, MEMBER_ID, MEMBER_NAME, MEMBER_BIRTH,
		MEMBER_PHONE_NUMBER,
		MEMBER_ADDRESS_MAIN, MEMBER_ADDRESS_DETAIL, MEMBER_EMAIL_ID,
		MEMBER_EMAIL_DOMAIN FROM MEMBER WHERE MEMBER_NUMBER = #{memberNumber}
	</select>

	<!-- 아이디 찾기 -->
	<select id="SELECTONEFINDID" resultMap="memberMap">
		SELECT MEMBER_ID, MEMBER_NUMBER, MEMBER_IS_WITHDRAW FROM MEMBER
		WHERE (MEMBER_BIRTH = #{memberBirth} AND MEMBER_PHONE_NUMBER =
		#{memberPhoneNumber})
		OR (MEMBER_BIRTH = #{memberBirth} AND MEMBER_EMAIL_ID = #{memberEmailId}
		AND MEMBER_EMAIL_DOMAIN = #{memberEmailDomain})
	</select>

	<!-- 비밀번호 찾기-->
	<select id="SELECTONEFINDPASSWORD" resultMap="memberMap">
		SELECT MEMBER_NUMBER, MEMBER_PASSWORD, MEMBER_IS_WITHDRAW FROM MEMBER
		WHERE (MEMBER_BIRTH = #{memberBirth} AND MEMBER_ID = #{memberId} AND
		MEMBER_PHONE_NUMBER = #{memberPhoneNumber})
		OR (MEMBER_BIRTH = #{memberBirth} AND MEMBER_ID = #{memberId} AND
		MEMBER_EMAIL_ID = #{memberEmailId} AND MEMBER_EMAIL_DOMAIN =
		#{memberEmailDomain})
	</select>

	<!-- 이메일 중복검사-->
	<select id="SELECTONEEMAIL" resultMap="memberMap">
		SELECT MEMBER_NUMBER, MEMBER_NAME, MEMBER_IS_ADMIN, MEMBER_ID FROM
		MEMBER
		WHERE MEMBER_EMAIL_ID = #{memberEmailId} AND MEMBER_EMAIL_DOMAIN =
		#{memberEmailDomain}
	</select>
	<!-- 핸드폰 중복검사-->
	<select id="SELECTONEPHONE" resultMap="memberMap">
		SELECT MEMBER_NUMBER FROM MEMBER WHERE MEMBER_PHONE_NUMBER =
		#{memberPhoneNumber}
	</select>

	<!-- 내정보 본인확인-->
	<select id="SELECTONEMYPAGE" resultMap="memberMap">
		SELECT MEMBER_NUMBER, MEMBER_PASSWORD, MEMBER_NAME, MEMBER_IS_ADMIN,
		MEMBER_ID FROM MEMBER
		WHERE MEMBER_NUMBER = #{memberNumber}
	</select>

	<!-- insert -->

	<!-- 회원 가입 -->
	<insert id="INSERTJOIN"> INSERT INTO MEMBER (MEMBER_NUMBER, MEMBER_ID,
		MEMBER_PASSWORD, MEMBER_NAME, MEMBER_BIRTH, MEMBER_PHONE_NUMBER,
		MEMBER_ADDRESS_MAIN, MEMBER_ADDRESS_DETAIL, MEMBER_EMAIL_ID,
		MEMBER_EMAIL_DOMAIN, MEMBER_REGISTER_DATE, MEMBER_IS_ADMIN,
		MEMBER_IS_WITHDRAW) VALUES ( SEQ_MEMBER.NEXTVAL, #{memberId},
		#{memberPassword}, #{memberName}, #{memberBirth}, #{memberPhoneNumber}, <choose>
			<when test="memberAddressMain != null and memberAddressMain != ''">
		#{memberAddressMain}</when>
			<otherwise>NULL</otherwise>
		</choose>, <choose>
			<when
				test="memberAddressDetail != null and memberAddressDetail != ''">
		#{memberAddressDetail}</when>
			<otherwise>NULL</otherwise>
		</choose>, #{memberEmailId},
		#{memberEmailDomain}, SYSDATE, 0, 0) </insert>

	<!-- 간편 로그인 회원번호 생성 -->
	<select id="GETSOCIALMEMBERNUMBER" resultType="java.lang.Long"> SELECT NVL(MAX(MEMBER_NUMBER), <choose>
			<when test="_parameter == 0">19999</when>
			<when test="_parameter == 1">29999</when>
		</choose> ) + 1
		FROM MEMBER <where>
			<if test="_parameter == 0">
				MEMBER_NUMBER BETWEEN 20000 AND 29999
			</if>
			<if test="_parameter == 1">
				MEMBER_NUMBER BETWEEN 30000 AND 39999
			</if>
		</where>
	</select>

	<!-- 간편 로그인 -->
	<insert id="INSERTSOCIAL">
		INSERT INTO MEMBER ( MEMBER_NUMBER, MEMBER_ID, MEMBER_PASSWORD,
		MEMBER_NAME, MEMBER_BIRTH, MEMBER_PHONE_NUMBER,
		MEMBER_ADDRESS_MAIN, MEMBER_ADDRESS_DETAIL, MEMBER_EMAIL_ID,
		MEMBER_EMAIL_DOMAIN, MEMBER_REGISTER_DATE, MEMBER_IS_ADMIN,
		MEMBER_IS_WITHDRAW
		) VALUES ( #{memberNumber}, #{memberId}, #{memberPassword},
		#{memberName}, #{memberBirth}, #{memberPhoneNumber},
		#{memberAddressMain}, #{memberAddressDetail},
		#{memberEmailId}, #{memberEmailDomain}, SYSDATE, 0, 0)
	</insert>

	<!-- update -->
	<!-- 비밀번호 변경 -->
	<update id="UPDATEPASSWORD">
		UPDATE MEMBER SET MEMBER_PASSWORD = #{memberPassword} WHERE
		MEMBER_NUMBER = #{memberNumber} OR MEMBER_ID = #{memberId}
	</update>

	<!-- 내 정보 수정 -->
	<update id="UPDATEMYINFORMATION">
		UPDATE MEMBER SET MEMBER_PHONE_NUMBER = #{memberPhoneNumber},
		MEMBER_ADDRESS_MAIN = #{memberAddressMain}, MEMBER_ADDRESS_DETAIL =
		#{memberAddressDetail}, MEMBER_EMAIL_ID = #{memberEmailId}, MEMBER_EMAIL_DOMAIN = #{memberEmailDomain}
		WHERE MEMBER_NUMBER = #{memberNumber}
	</update>

	<!-- 회원 탈퇴 -->
	<update id="UPDATECANCEL">
	UPDATE MEMBER SET MEMBER_IS_WITHDRAW = 1 WHERE MEMBER_NUMBER = #{memberNumber}
	</update>


	<!-- delete 
	<delete id="">
	</delete> -->

</mapper>