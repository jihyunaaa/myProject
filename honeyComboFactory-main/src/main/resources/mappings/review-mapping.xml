<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ReviewDAO">

	<resultMap id="reviewMap" type="review">
		<id property="reviewNumber" column="REVIEW_NUMBER" />
		<result property="reviewScore" column="REVIEW_SCORE" />
		<result property="reviewRegisterDate" column="REVIEW_REGISTER_DATE" />
		<result property="reviewContent" column="REVIEW_CONTENT" />
		<result property="memberNumber" column="MEMBER_NUMBER" />
		<result property="productComboNumber" column="PRODUCT_COMBO_NUMBER" />
		<result property="memberName" column="MEMBER_NAME" />
		<result property="memberIsWithdraw" column="MEMBER_IS_WITHDRAW" />
		<result property="totalReviewCount" column="TOTAL_REVIEW_COUNT" />
	</resultMap>

	<!-- getAll -->
	<!-- 모든 리뷰 목록 조회 (작성일순)-->
	<select id="SELECTALLREVIEWLIST" resultMap="reviewMap">
	SELECT REVIEW_NUMBER, REVIEW_SCORE, REVIEW_REGISTER_DATE, REVIEW_CONTENT, MEMBER_NUMBER, MEMBER_NAME,
	 MEMBER_IS_WITHDRAW, PRODUCT_COMBO_NUMBER, TOTAL_REVIEW_COUNT FROM (SELECT REVIEW.REVIEW_NUMBER, REVIEW.REVIEW_SCORE,
	 REVIEW.REVIEW_REGISTER_DATE, REVIEW.REVIEW_CONTENT, REVIEW.MEMBER_NUMBER, MEMBER.MEMBER_NAME, MEMBER.MEMBER_IS_WITHDRAW,
	 REVIEW.PRODUCT_COMBO_NUMBER, ROW_NUMBER() OVER (ORDER BY REVIEW.REVIEW_REGISTER_DATE DESC) AS RN, COUNT(REVIEW.REVIEW_NUMBER)
	 OVER() AS TOTAL_REVIEW_COUNT FROM REVIEW JOIN MEMBER ON REVIEW.MEMBER_NUMBER = MEMBER.MEMBER_NUMBER) WHERE RN BETWEEN #{reviewIndex} AND #{reviewContentCount}
	</select>
	
	<!-- 한 상품에 대한 리뷰 목록 조회 -->
	<select id="SELECTALLREVIEWONEPRODUCT" resultMap="reviewMap">
	SELECT REVIEW_NUMBER, REVIEW_SCORE, REVIEW_REGISTER_DATE, REVIEW_CONTENT, MEMBER_NUMBER, MEMBER_NAME,
	 MEMBER_IS_WITHDRAW, PRODUCT_COMBO_NUMBER, TOTAL_REVIEW_COUNT FROM (SELECT REVIEW.REVIEW_NUMBER, REVIEW.REVIEW_SCORE,
	 REVIEW.REVIEW_REGISTER_DATE, REVIEW.REVIEW_CONTENT, MEMBER.MEMBER_NUMBER, MEMBER.MEMBER_NAME, MEMBER.MEMBER_IS_WITHDRAW,
	 REVIEW.PRODUCT_COMBO_NUMBER, ROW_NUMBER() OVER (ORDER BY REVIEW.REVIEW_REGISTER_DATE DESC) RN, COUNT(REVIEW.REVIEW_NUMBER)
	 OVER() AS TOTAL_REVIEW_COUNT FROM REVIEW JOIN MEMBER ON REVIEW.MEMBER_NUMBER = MEMBER.MEMBER_NUMBER WHERE REVIEW.PRODUCT_COMBO_NUMBER = #{productComboNumber})
	 WHERE RN BETWEEN #{reviewIndex} AND #{reviewContentCount}
	</select>
	
	<!-- getOne -->
	<!-- 리뷰 상세 조회 -->
	<select id="SELECTONEREVIEW" resultMap="reviewMap">
	SELECT REVIEW_NUMBER, REVIEW_SCORE, REVIEW_REGISTER_DATE, REVIEW_CONTENT, MEMBER_NAME, MEMBER_NUMBER,
	 PRODUCT_COMBO_NUMBER, MEMBER_IS_WITHDRAW FROM (SELECT REVIEW.REVIEW_NUMBER, REVIEW.REVIEW_SCORE, REVIEW.REVIEW_REGISTER_DATE,
	 REVIEW.REVIEW_CONTENT, MEMBER.MEMBER_NAME, REVIEW.MEMBER_NUMBER, REVIEW.PRODUCT_COMBO_NUMBER, MEMBER.MEMBER_IS_WITHDRAW FROM REVIEW
	 JOIN MEMBER ON REVIEW.MEMBER_NUMBER = MEMBER.MEMBER_NUMBER) WHERE MEMBER_NUMBER = #{memberNumber} AND PRODUCT_COMBO_NUMBER = #{productComboNumber}
	</select>
	
	<!-- insert -->
	<!-- 리뷰 등록 -->
	<insert id="INSERTREVIEW">
	INSERT INTO REVIEW (REVIEW_NUMBER, REVIEW_SCORE, REVIEW_REGISTER_DATE, REVIEW_CONTENT, MEMBER_NUMBER, PRODUCT_COMBO_NUMBER)
	 VALUES (SEQ_REVIEW.NEXTVAL, #{reviewScore}, SYSDATE, #{reviewContent}, #{memberNumber}, #{productComboNumber})
	</insert>
	
	<!-- update -->
	<!-- 리뷰 수정 -->
	<update id="UPDATEREVIEW">
	UPDATE REVIEW SET REVIEW_SCORE = #{reviewScore}, REVIEW_CONTENT = #{reviewContent} WHERE REVIEW_NUMBER = #{reviewNumber}
	</update>
	
	<!-- delete -->
	<!-- 리뷰 삭제-->
	<delete id="DELETEREVIEW">
	DELETE FROM REVIEW WHERE REVIEW_NUMBER = #{reviewNumber}
	</delete>
</mapper>