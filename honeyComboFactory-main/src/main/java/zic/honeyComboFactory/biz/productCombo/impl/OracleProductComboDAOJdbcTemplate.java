package zic.honeyComboFactory.biz.productCombo.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import zic.honeyComboFactory.biz.productComboVO.ProductComboVO;

public class OracleProductComboDAOJdbcTemplate { // 꿀조합 상품 기능 - Oracle DB

	@Autowired
	private JdbcTemplate jdbcTemplate;

	// 1. 전체 출력 인기순
	final String SELECTALLPOPULAR = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
			+ " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES,"
			+ " TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
			+ " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES,"
			+ " COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY TOTAL_SALES DESC) RN FROM VIEW_PRODUCT_COMBO) WHERE RN BETWEEN ? AND ?";

	// 2. 전체 출력 가격 높은순
	final String SELECTALLPRICEDESC = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION,"
			+ " PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME,"
			+ " PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK,"
			+ " TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY COMBO_DISCOUNTED_PRICE DESC) RN FROM VIEW_PRODUCT_COMBO) WHERE RN BETWEEN ? AND ?";

	// 3. 전체 출력 가격 낮은순
	final String SELECTALLPRICEASC = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION,"
			+ " PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME,"
			+ " PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK,"
			+ " TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY COMBO_DISCOUNTED_PRICE ASC) RN FROM VIEW_PRODUCT_COMBO) WHERE RN BETWEEN ? AND ?";

	// 4. 카테고리별 인기순
	final String SELECTALLCATEGORYPOPULAR = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE,"
			+ " PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE,"
			+ " PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER,"
			+ " ROW_NUMBER() OVER (ORDER BY TOTAL_SALES DESC) RN FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_CATEGORY = ?) WHERE RN BETWEEN ? AND ?";

	// 5. 카테고리별 가격 높은순
	final String SELECTALLCATEGORYDESC = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE,"
			+ " PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE,"
			+ " PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER,"
			+ " ROW_NUMBER() OVER (ORDER BY COMBO_DISCOUNTED_PRICE DESC) RN FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_CATEGORY = ?) WHERE RN BETWEEN ? AND ?";

	// 6. 카테고리별 가격 낮은순
	final String SELECTALLCATEGORYASC = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT,"
			+ " COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION,"
			+ " PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY COMBO_DISCOUNTED_PRICE ASC)"
			+ " RN FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_CATEGORY = ?) WHERE RN BETWEEN ? AND ?";

	// 7. CU 콤보 상품 판매순 (STORE = 0)
	final String SELECTALLCUPOPULAR = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT,"
			+ " COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
			+ " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER()"
			+ " OVER (ORDER BY TOTAL_SALES DESC) RN FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_STORE = 0) WHERE RN BETWEEN ? AND ?";

	// 8. GS25 콤보 상품 판매순 (STORE = 1)
	final String SELECTALLGSPOPULAR = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT,"
			+ " COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION,"
			+ " PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY TOTAL_SALES DESC) RN"
			+ " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_STORE = 1) WHERE RN BETWEEN ? AND ?";

	// 9. MD픽 상품 출력(재고 많은 순)
	final String SELECTALLMD = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE,"
			+ " PRODUCT_COMBO_STOCK, TOTAL_SALES FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT,"
			+ " COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, ROW_NUMBER() OVER (ORDER BY PRODUCT_COMBO_STOCK DESC) RN FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_CATEGORY = 'MD') WHERE RN BETWEEN ? AND ?";

	// 10. 핫이슈 상품 출력(재고 적은 순)
	final String SELECTALLHOTISSUE = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE,"
			+ " PRODUCT_COMBO_STOCK, TOTAL_SALES FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE,"
			+ " PRODUCT_COMBO_STOCK, TOTAL_SALES, ROW_NUMBER() OVER (ORDER BY PRODUCT_COMBO_STOCK ASC) RN FROM VIEW_PRODUCT_COMBO) WHERE RN BETWEEN ? AND ?";

	// 11. 검색 (인기순)
	final String SELECTALLSEARCHPOPULAR = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE,"
			+ " PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT,"
			+ " COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY TOTAL_SALES DESC) RN FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NAME LIKE '%' || ? || '%')"
			+ " WHERE RN BETWEEN ? AND ?";

	// 12. 검색 (가격높은순)
	final String SELECTALLSEARCHDESC = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK,"
			+ " TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE,"
			+ " PRODUCT_COMBO_STOCK, TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY COMBO_DISCOUNTED_PRICE DESC) RN FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NAME LIKE '%' || ? || '%') WHERE RN BETWEEN ? AND ?";

	// 13. 검색 (가격낮은순)
	final String SELECTALLSEARCHASC = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK,"
			+ " TOTAL_SALES, TOTAL_COUNT_NUMBER FROM (SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE,"
			+ " PRODUCT_COMBO_STOCK, TOTAL_SALES, COUNT(PRODUCT_COMBO_NUMBER) OVER() AS TOTAL_COUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY COMBO_DISCOUNTED_PRICE ASC) RN FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NAME LIKE '%' || ? || '%') WHERE RN BETWEEN ? AND ?";

	// 14. 상단 광고 MD픽 출력
	final String SELECTONEADVERTISEMENT = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK,"
			+ " TOTAL_SALES FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NUMBER = ?";

	// 15. 콤보 상품 상세 조회
	final String SELECTONE = "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NUMBER = ?";

	// 16. 콤보 상품 삭제
	final String DELETE = "DELETE FROM PRODUCT_COMBO WHERE PRODUCT_COMBO_NUMBER = ?";

	// 17. 콤보 상품 수정
	final String UPDATE = "UPDATE PRODUCT_COMBO SET PRODUCT_COMBO_NAME = ?, PRODUCT_COMBO_IMAGE = ?, PRODUCT_COMBO_INFORMATION = ?, PRODUCT_COMBO_CATEGORY = ?,"
			+ " PRODUCT_COMBO_STORE = ? WHERE PRODUCT_COMBO_NUMBER = ?";

	// 18. 콤보 상품 판매가격 및 이름
	final String SELECTONECOMBODISCOUNTEDPRICEANDCOMBONAME = "SELECT PRODUCT_COMBO_NAME, COMBO_DISCOUNTED_PRICE FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NUMBER = ?";

	// 18. 콤보 상품 추가
	/*
	 * final String INSERT =
	 * "INSERT INTO PRODUCT_COMBO (PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_STORE, "
	 * +
	 * "PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STOCK) SELECT IFNULL(MAX(PRODUCT_COMBO.PRODUCT_COMBO_NUMBER), 0) + 1, "
	 * +
	 * "?, ?, ?, ?, ?, LEAST(COALESCE(PRODUCT_SINGLE.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), "
	 * +
	 * "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) FROM PRODUCT_SINGLE "
	 * +
	 * "JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER = ? "
	 * +
	 * "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER = ? "
	 * + "WHERE PRODUCT_SINGLE.PRODUCT_SINGLE_NUMBER = ?";
	 */

	// getAll → R
	public List<ProductComboVO> getAll(ProductComboVO productComboVO) {

		// 전체 출력 인기순
		if (productComboVO.getCondition().equals("SELECTALLPOPULAR")) {
			System.out.println("전체 출력 인기순");
			Object[] args = { productComboVO.getProductComboIndex(), productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLPOPULAR, args, new ProductComboGetAllRowMapper());
		}
		// 전체 출력 가격 높은순
		else if (productComboVO.getCondition().equals("SELECTALLPRICEDESC")) {
			System.out.println("전체 출력 가격 높은 순");
			Object[] args = { productComboVO.getProductComboIndex(), productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLPRICEDESC, args, new ProductComboGetAllRowMapper());
		}
		// 전체 출력 가격 낮은순
		else if (productComboVO.getCondition().equals("SELECTALLPRICEASC")) {
			System.out.println("전체 출력 가격 낮은 순");
			Object[] args = { productComboVO.getProductComboIndex(), productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLPRICEASC, args, new ProductComboGetAllRowMapper());
		}
		// 카테고리별 인기순
		else if (productComboVO.getCondition().equals("SELECTALLCATEGORYPOPULAR")) {
			System.out.println("카테고리별 인기순");
			Object[] args = { productComboVO.getProductComboCategory(), productComboVO.getProductComboIndex(),
					productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLCATEGORYPOPULAR, args, new ProductComboGetAllRowMapper());
		}
		// 카테고리별 가격 높은순
		else if (productComboVO.getCondition().equals("SELECTALLCATEGORYDESC")) {
			System.out.println("카테고리별 가격 높은 순");
			Object[] args = { productComboVO.getProductComboCategory(), productComboVO.getProductComboIndex(),
					productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLCATEGORYDESC, args, new ProductComboGetAllRowMapper());
		}
		// 카테고리별 가격 낮은순
		else if (productComboVO.getCondition().equals("SELECTALLCATEGORYASC")) {
			System.out.println("카테고리별 가격 낮은 순");
			Object[] args = { productComboVO.getProductComboCategory(), productComboVO.getProductComboIndex(),
					productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLCATEGORYASC, args, new ProductComboGetAllRowMapper());
		}
		// CU 콤보 상품 판매순 (STORE = 0)
		else if (productComboVO.getCondition().equals("SELECTALLCUPOPULAR")) {
			System.out.println("CU 콤보 상품 판매순");
			Object[] args = { productComboVO.getProductComboIndex(), productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLCUPOPULAR, args, new ProductComboGetAllRowMapper());
		}
		// GS25 콤보 상품 판매순 (STORE = 1)
		else if (productComboVO.getCondition().equals("SELECTALLGSPOPULAR")) {
			System.out.println("GS 콤보 상품 판매순");
			Object[] args = { productComboVO.getProductComboIndex(), productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLGSPOPULAR, args, new ProductComboGetAllRowMapper());
		}
		// MD픽
		else if (productComboVO.getCondition().equals("SELECTALLMD")) {
			System.out.println("MD픽");
			Object[] args = { productComboVO.getProductComboIndex(), productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLMD, args, new ProductComboGetAllOnlyCategoryRowMapper());
		}
		// 핫이슈
		else if (productComboVO.getCondition().equals("SELECTALLHOTISSUE")) {
			System.out.println("핫이슈");
			Object[] args = { productComboVO.getProductComboIndex(), productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLHOTISSUE, args, new ProductComboGetAllOnlyCategoryRowMapper());
		}
		// 검색(가격높은순)
		else if (productComboVO.getCondition().equals("SELECTALLSEARCHDESC")) {
			System.out.println("검색 가격 높은 순");
			Object[] args = { productComboVO.getSearchKeyword(), productComboVO.getProductComboIndex(),
					productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLSEARCHDESC, args, new ProductComboGetAllRowMapper());
		}
		// 검색(가격낮은순)
		else if (productComboVO.getCondition().equals("SELECTALLSEARCHASC")) {
			System.out.println("건색 가격 낮은 순");
			Object[] args = { productComboVO.getSearchKeyword(), productComboVO.getProductComboIndex(),
					productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLSEARCHASC, args, new ProductComboGetAllRowMapper());
		}
		// 검색(인기순)
		else if (productComboVO.getCondition().equals("SELECTALLSEARCHPOPULAR")) {
			System.out.println("검색 인기순");
			Object[] args = { productComboVO.getSearchKeyword(), productComboVO.getProductComboIndex(),
					productComboVO.getProductComboContentCount() };
			return jdbcTemplate.query(SELECTALLSEARCHPOPULAR, args, new ProductComboGetAllRowMapper());
		}
		// 조건에 안맞다면 빈 배열 반환
		else {
			return new ArrayList<>();
		}
	}

	// getOne → R
	public ProductComboVO getOne(ProductComboVO productComboVO) {
		// 조합 상품 상세 조회
		if (productComboVO.getCondition().equals("SELECTONE")) {
			System.out.println("조합 상품 상세 조회");
			Object[] args = { productComboVO.getProductComboNumber() };

			List<ProductComboVO> list = jdbcTemplate.query(SELECTONE, args, new ProductComboGetOneRowMapper());

			return getSingleResult(list);
		}
		// 상단 광고 MD픽
		else if (productComboVO.getCondition().equals("SELECTONEADVERTISEMENT")) {
			System.out.println("광고 상품 조회");
			Object[] args = { productComboVO.getProductComboADNumber() };

			List<ProductComboVO> list = jdbcTemplate.query(SELECTONEADVERTISEMENT, args,
					new ProductComboGetOneRowMapper());

			return getSingleResult(list);
		}
		// 콤보 상품 판매가격 및 이름
		else if (productComboVO.getCondition().equals("SELECTONECOMBODISCOUNTEDPRICEANDCOMBONAME")) {
			System.out.println("콤보 상품 판매가격 및 이름");
			Object[] args = { productComboVO.getProductComboNumber() };

			List<ProductComboVO> list = jdbcTemplate.query(SELECTONECOMBODISCOUNTEDPRICEANDCOMBONAME, args,
					new ProductComboGetOneDiscountedPriceAndNameRowMapper());

			return getSingleResult(list);
		}
		// 조건에 만족하지 못하면 null 반환
		else {
			return null;
		}
	}

	// insert → C
	public boolean insert(ProductComboVO productComboVO) {
		return false;
	}

	// update → U
	public boolean update(ProductComboVO productComboVO) {
		System.out.println("조합 상품 정보 수정");
		Object[] args = { productComboVO.getProductComboName(), productComboVO.getProductComboImage(),
				productComboVO.getProductComboInformation(), productComboVO.getProductComboCategory(),
				productComboVO.getProductComboStore(), productComboVO.getProductComboNumber() };
		int result = jdbcTemplate.update(UPDATE, args);
		if (result <= 0) {
			return false;
		}
		return true;
	}

	// delete → D
	public boolean delete(ProductComboVO productComboVO) {
		System.out.println("조합 상품 삭제");
		Object[] args = { productComboVO.getProductComboNumber() };
		// 조합 상품 삭제
		int result = jdbcTemplate.update(DELETE, args);
		if (result <= 0) {
			return false;
		}
		return true;
	}

	// 반환 메서드
	private ProductComboVO getSingleResult(List<ProductComboVO> list) {
		if (list.isEmpty()) {
			return null;
		}
		return list.get(0);
	}

}

// 조합 상품 정렬
class ProductComboGetAllRowMapper implements RowMapper<ProductComboVO> {
	@Override
	public ProductComboVO mapRow(ResultSet rs, int rowNum) throws SQLException {
		ProductComboVO data = new ProductComboVO();

		System.out.println("조합 상품 GetAll Mapepr 시작");

		data.setProductComboNumber(rs.getLong("PRODUCT_COMBO_NUMBER"));
		data.setProductComboName(rs.getString("PRODUCT_COMBO_NAME"));
		data.setProductComboStore(rs.getInt("PRODUCT_COMBO_STORE"));
		data.setProductComboCategory(rs.getString("PRODUCT_COMBO_CATEGORY"));
		data.setProductComboPrice(rs.getInt("PRODUCT_COMBO_PRICE"));
		data.setProductComboImage(rs.getString("PRODUCT_COMBO_IMAGE"));
		data.setProductComboStock(rs.getInt("PRODUCT_COMBO_STOCK"));
		data.setTotalCountNumber(rs.getLong("TOTAL_COUNT_NUMBER"));
		// 할인율
		data.setProductComboDiscount(rs.getInt("PRODUCT_COMBO_DISCOUNT"));
		// 할인된 가격
		data.setProductComboDiscountedPrice(rs.getInt("COMBO_DISCOUNTED_PRICE"));

		System.out.println("getAll 상품 정보 데이터 [" + data + "]");
		return data;
	}
}

// MD픽, 핫이슈용 정렬
class ProductComboGetAllOnlyCategoryRowMapper implements RowMapper<ProductComboVO> {
	@Override
	public ProductComboVO mapRow(ResultSet rs, int rowNum) throws SQLException {
		ProductComboVO data = new ProductComboVO();

		data.setProductComboNumber(rs.getLong("PRODUCT_COMBO_NUMBER"));
		data.setProductComboName(rs.getString("PRODUCT_COMBO_NAME"));
		data.setProductComboStore(rs.getInt("PRODUCT_COMBO_STORE"));
		data.setProductComboCategory(rs.getString("PRODUCT_COMBO_CATEGORY"));
		data.setProductComboPrice(rs.getInt("PRODUCT_COMBO_PRICE"));
		data.setProductComboImage(rs.getString("PRODUCT_COMBO_IMAGE"));
		data.setProductComboStock(rs.getInt("PRODUCT_COMBO_STOCK"));
		// 할인율
		data.setProductComboDiscount(rs.getInt("PRODUCT_COMBO_DISCOUNT"));
		// 할인된 가격
		data.setProductComboDiscountedPrice(rs.getInt("COMBO_DISCOUNTED_PRICE"));

		System.out.println("getAll 상품 정보 데이터 [" + data + "]");
		return data;
	}
}

// 상품 상세정보 + 광고
class ProductComboGetOneRowMapper implements RowMapper<ProductComboVO> {

	@Override
	public ProductComboVO mapRow(ResultSet rs, int rowNum) throws SQLException {
		ProductComboVO data = new ProductComboVO();

		data.setProductComboNumber(rs.getLong("PRODUCT_COMBO_NUMBER"));
		data.setProductComboName(rs.getString("PRODUCT_COMBO_NAME"));
		data.setProductComboCategory(rs.getString("PRODUCT_COMBO_CATEGORY"));
		data.setProductComboStore(rs.getInt("PRODUCT_COMBO_STORE"));
		data.setProductComboPrice(rs.getInt("PRODUCT_COMBO_PRICE"));
		data.setProductComboStock(rs.getInt("PRODUCT_COMBO_STOCK"));
		data.setProductComboImage(rs.getString("PRODUCT_COMBO_IMAGE"));
		data.setProductComboInformation(rs.getString("PRODUCT_COMBO_INFORMATION"));
		// 할인율
		data.setProductComboDiscount(rs.getInt("PRODUCT_COMBO_DISCOUNT"));
		// 할인된 가격
		data.setProductComboDiscountedPrice(rs.getInt("COMBO_DISCOUNTED_PRICE"));

		System.out.println("getOne 상품 상세 정보 데이터 " + data + "]");
		return data;
	}
}

// 콤보 상품 판매가격 및 이름
class ProductComboGetOneDiscountedPriceAndNameRowMapper implements RowMapper<ProductComboVO> {
	@Override
	public ProductComboVO mapRow(ResultSet rs, int rowNum) throws SQLException {
		ProductComboVO data = new ProductComboVO();

		data.setProductComboName(rs.getString("PRODUCT_COMBO_NAME"));
		// 할인된 가격
		data.setProductComboDiscountedPrice(rs.getInt("COMBO_DISCOUNTED_PRICE"));

		System.out.println("DAO getOne-콤보 상품 판매가격 및 이름 : [");
		System.out.println("판매가격 : " + data.getProductComboDiscountedPrice());
		System.out.println("이름 : " + data.getProductComboName());
		System.out.println("]");
		return data;
	}
}

//23ai 버전 OFFSET ? ROWS FETCH NEXT ? ROWS ONLY을 사용하였으나 11g에서는 사용 불가

/*
 * // 1. 전체 출력 인기순 final String SELECTALLPOPULAR =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO ORDER BY TOTAL_SALES DESC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 2. 전체 출력 가격 높은순 final String SELECTALLPRICEDESC =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER FROM"
 * +
 * " VIEW_PRODUCT_COMBO ORDER BY COMBO_DISCOUNTED_PRICE DESC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 3. 전체 출력 가격 낮은순 final String SELECTALLPRICEASC =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO ORDER BY COMBO_DISCOUNTED_PRICE ASC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 4. 카테고리별 인기순 final String SELECTALLCATEGORYPOPULAR =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_CATEGORY = ? ORDER BY TOTAL_SALES DESC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 5. 카테고리별 가격 높은순 final String SELECTALLCATEGORYDESC =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_CATEGORY = ? ORDER BY COMBO_DISCOUNTED_PRICE DESC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 6. 카테고리별 가격 낮은순 final String SELECTALLCATEGORYASC =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_CATEGORY = ? ORDER BY COMBO_DISCOUNTED_PRICE ASC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 7. CU 콤보 상품 판매순 (STORE = 0) final String SELECTALLCUPOPULAR =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_STORE = 0 ORDER BY TOTAL_SALES DESC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 8. GS25 콤보 상품 판매순 (STORE = 1) final String SELECTALLGSPOPULAR =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_STORE = 1 ORDER BY TOTAL_SALES DESC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 9. MD픽 상품 출력(재고 많은 순) final String SELECTALLMD =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_CATEGORY = 'MD' ORDER BY PRODUCT_COMBO_STOCK DESC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 10. 핫이슈 상품 출력(재고 적은 순) final String SELECTALLHOTISSUE =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES"
 * +
 * " FROM VIEW_PRODUCT_COMBO ORDER BY PRODUCT_COMBO_STOCK ASC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 11. 검색 (인기순) final String SELECTALLSEARCHPOPULAR =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NAME LIKE CONCAT('%', ?, '%') ORDER BY TOTAL_SALES DESC OFFSET ? ROWS FETCH NEXT ? ROWS ONLY"
 * ;
 * 
 * // 12. 검색 (가격높은순) final String SELECTALLSEARCHDESC =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NAME LIKE CONCAT('%', ?, '%') ORDER BY COMBO_DISCOUNTED_PRICE DESC"
 * + " OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
 * 
 * // 13. 검색 (가격낮은순) final String SELECTALLSEARCHASC =
 * "SELECT PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO_STORE, PRODUCT_COMBO_IMAGE,"
 * +
 * " PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO_PRICE, PRODUCT_COMBO_DISCOUNT, COMBO_DISCOUNTED_PRICE, PRODUCT_COMBO_STOCK, TOTAL_SALES, TOTAL_COUNT_NUMBER"
 * +
 * " FROM VIEW_PRODUCT_COMBO WHERE PRODUCT_COMBO_NAME LIKE CONCAT('%', ?, '%') ORDER BY COMBO_DISCOUNTED_PRICE ASC"
 * + " OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";
 */
